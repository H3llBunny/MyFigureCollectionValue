@model FigurePageViewModel
@using System.Globalization

@{
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger d-flex justify-content-center align-items-center">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success d-flex justify-content-center align-items-center">
            @TempData["SuccessMessage"]
        </div>
    }
}

<div class="d-flex flex-wrap justify-content-center">
    <div class="text-center" id="leftSide">
        <div class="figureImage">
            <img src="@Model.ImageUrl" />
        </div>
        <div class="lowMaxPrice">
            <div class="lowest-price">
                <storng>Lowest Aftermarket Price: </storng><span class="figure-price">
                    @(Model.LowestAftermarketPeice != null
                        ? (Model.LowestAftermarketPeice.Currency == "USD"
                        ? "$" : Model.LowestAftermarketPeice.Currency)
                        + Model.LowestAftermarketPeice.Price.ToString("N2", new CultureInfo("en-US")) : "N/A")
                </span>
            </div>
            <div class="highest-price">
                <storng>Highest Aftermarket Price: </storng><span class="figure-price">
                    @(Model.HighestAftermarketPrice != null
                        ? (Model.HighestAftermarketPrice.Currency == "USD"
                        ? "$" : Model.HighestAftermarketPrice.Currency)
                        + Model.HighestAftermarketPrice.Price.ToString("N2", new CultureInfo("en-US")) : "N/A")
                </span>
            </div>
        </div>
    </div>
    <div id="rightSide">
        <div class="figure-info-and-ads">
            <ul class="figureInfo">
                <li><h2>@Model.Name</h2></li>
                <br />
                <li><strong>Origin: </strong>@Model.Origin</li>
                <li><strong>Company: </strong>@Model.Company</li>
                <br />
                <li class="position-relative">
                    <a class="text-decoration-none" style="color: white;" href="@Model.FigureUrl" target="_blank">
                        <img class="mfc-logo" src="~/images/mfc-icon.webp" alt="@Model.FigureUrl" title="Open on MFC" />
                        <span class="mfc-logo-text" title="Open on MFC">
                            <span>MY<strong>FIGURE</strong>COLLECTION</span>
                        </span>
                    </a>
                </li>
                <br />
                <li>
                    <div class="d-flex align-items-center">
                        <strong class="me-2">Paid: </strong>
                        <span class="d-flex align-items-center">
                            <span id="displayPrice" class="figure-price me-2">
                                @(Model.PurchasedPrice > 0
                                    ? "$" + Model.PurchasedPrice.ToString("N2", new CultureInfo("en-US"))
                                    : "N/A")
                            </span>
                            <form asp-action="AddPurchasePrice" method="post" class="d-flex">
                                <input type="hidden" name="figureId" value="@Model.Id" />
                                <input type="text"
                                       name="price"
                                       placeholder="Purchased for ?"
                                       class="form-control form-control-sm input-unstyled"
                                       oninput="toggleSubmitButton(this)" />
                                <select name="currency" id="currency-selector" class="form-select form-select-sm">
                                    @foreach (var currency in Model.SupportedCurrencies)
                                    {
                                        <option value=@currency>@currency</option>
                                    }
                                </select>
                                <button type="submit"
                                        id="submitPriceButton"
                                        class="btn btn-primary btn-sm"
                                        style="display: none;">
                                    Submit
                                </button>
                            </form>
                        </span>
                    </div>
                </li>
                <li>
                    <strong>Retail Price: </strong><span class="figure-price">
                        @(Model.RetailPrice > 0
                            ? Model.RetailPriceCurrency + Model.RetailPrice.ToString("N2", new CultureInfo("en-US"))
                            : "N/A")
                    </span>
                </li>
                <li>
                    <strong title="This price is based on currently available aftermarket ads.">Avg. Aftermarket Price: </strong><span class="figure-price">
                        @(Model.AvgCurrentAftermarketPrice > 0
                            ? Model.AvgAftermarketPriceCurrency + Model.AvgCurrentAftermarketPrice.ToString("N2", new CultureInfo("en-US")) : "N/A")
                    </span>
                </li>
            </ul>
            @if (Model.CurrentAftermarketPrices != null && Model.CurrentAftermarketPrices.Any())
            {
                <div id="aftermarketAds">
                    <div class="aftermarket-ads-container">
                        <strong style="text-align: center">Available ads</strong>
                        @foreach (var ad in Model.CurrentAftermarketPrices)
                        {
                            <div class="aftermarket-ad">
                                <a href="@ad.Url" target="_blank" class="btn btn-link">
                                    <strong>Date:</strong> @ad.LoggedAt.ToString("yyyy-MM-dd")
                                    <span class="figure-price">$@ad.Price </span>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <div id="figurePriceChart"></div>
    </div>
</div>

<script>
    function toggleSubmitButton(input) {
        const submitButton = document.getElementById('submitPriceButton');
        if (input.value.trim() !== "") {
            submitButton.style.display = 'inline-block';
        } else {
            submitButton.style.display = 'none';
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const aftermarketPrices = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AftermarketPrices,
            new Newtonsoft.Json.JsonSerializerSettings { ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore }));

        const prices = aftermarketPrices.sort((a, b) => new Date(a.LoggedAt) - new Date(b.LoggedAt));

        Highcharts.setOptions({
            time: {
                useUTC: true
            }
        });

        const priceData = prices.map(price => {
            let date = new Date(price.LoggedAt);
            date.setUTCHours(0, 0, 0, 0);
            return [date.getTime(), price.Price];
        });

        Highcharts.chart('figurePriceChart', {
            chart: {
                type: 'line',
                backgroundColor: '#333333',
                style: {
                    fontFamily: 'Arial, sans-serif'
                }
            },
            title: {
                text: 'Aftermarket Price Over Time',
                style: {
                    color: '#E0E0E0'
                }
            },
            accessibility: {
                enabled: false
            },
            xAxis: {
                type: 'datetime',
                title: {
                    text: '<span style="font-weight:bold; font-size: 16px">Date</span>',
                    margin: 10,
                    style: {
                        color: '#f48939'
                    }
                },
                labels: {
                    style: {
                        color: '#E0E0E0'
                    },
                    formatter: function () {
                        const utcDate = new Date(this.value);
                        utcDate.setUTCHours(0, 0, 0, 0);
                        return Highcharts.dateFormat('%e %b %Y', utcDate);
                    }
                },
                lineColor: '#f48939',
                tickColor: '#f48939'
            },
            yAxis: {
                title: {
                    text: '<span style="font-weight:bold; font-size: 16px">Price</span>',
                    style: {
                        color: '#f48939'
                    }
                },
                labels: {
                    style: {
                        color: '#E0E0E0'
                    },
                    formatter: function () {
                        return this.value + ' ' + 'USD';
                    }
                },
                gridLineColor: '#707070'
            },
            legend: {
                itemStyle: {
                    color: '#E0E0E0'
                },
                itemHoverStyle: {
                    color: '#FFFFFF'
                }
            },
            series: [{
                name: 'Price',
                data: priceData,
                color: '#f48939'
            }],
            tooltip: {
                formatter: function () {
                    return `<br>${Highcharts.dateFormat('%e %b %Y', this.x)}<br><strong style="color: #bc6c25">Price: </strong>${this.y} ${prices[0].Currency}`;
                }
            },
            credits: {
                enabled: false
            }
        });
    });
</script>